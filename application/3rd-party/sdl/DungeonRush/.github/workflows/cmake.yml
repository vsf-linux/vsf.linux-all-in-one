name: CMake

on: [push, pull_request]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally
    # well on Windows or Mac.  You can convert this to a matrix build if you need
    # cross-platform coverage.
    # See: https://docs.github.com/en/actions/configuring-and-managing-workflows/configuring-a-workflow#configuring-a-build-matrix
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]

    steps:
    - uses: actions/checkout@v2

    - name: Create Build Environment
      # Some projects don't allow in-source building, so create a separate build directory
      # We'll use this as our working directory for all subsequent commands
      run: cmake -E make_directory ${{runner.workspace}}/build

    - name: Install Dependencies on Ubuntu
      if: runner.os == 'Linux'
      run: sudo apt-get update && sudo apt-get install libsdl2-*
      
    - name: Install Dependencies on macOS
      if: runner.os == 'macOS'
      run: brew install sdl2 sdl2_mixer sdl2_net sdl2_image sdl2_ttf
      
    - name: Configure CMake
      # Use a bash shell so we can use the same syntax for environment variable
      # access regardless of the host operating system
      shell: bash
      working-directory: ${{runner.workspace}}/build
      # Note the current convention is to use the -S and -B options here to specify source 
      # and build directories, but this is only available with CMake 3.13 and higher.  
      # The CMake binaries on the Github Actions machines are (as of this writing) 3.12
      run: cmake $GITHUB_WORKSPACE -DCMAKE_BUILD_TYPE=$BUILD_TYPE

    - name: Build
      working-directory: ${{runner.workspace}}/build
      shell: bash
      # Execute the build.  You can specify a specific target with "--target <NAME>"
      run: cmake --build . --config $BUILD_TYPE

    - name: Copy Libraries (Linux)
      if: runner.os == 'Linux'
      working-directory: ${{runner.workspace}}/build
      shell: bash
      # Execute the build.  You can specify a specific target with "--target <NAME>"
      run: |
        wget https://github.com/Rapiz1/DungeonRush/releases/download/v1.0-alpha/linux-lib.tar.gz
        tar xzf linux-lib.tar.gz
        mv linux-lib/* bin
  
    - uses: actions/upload-artifact@v2
      with:
        name: DungeonRush-${{runner.os}}
        path: ${{runner.workspace}}/build/bin
        
  build-windows:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [windows-latest]
        arch: [i686, x86_64]
    defaults:
      run:
        shell: msys2 {0}
    steps:
    - uses: msys2/setup-msys2@v2
      if: matrix.arch == 'i686'
      with:
        msystem: MINGW32
        update: true
        install: base-devel git gcc mingw-w64-${{matrix.arch}}-cmake mingw-w64-${{matrix.arch}}-gcc

    - uses: msys2/setup-msys2@v2
      if: matrix.arch == 'x86_64'
      with:
        msystem: MINGW64
        update: true
        install: base-devel git gcc mingw-w64-${{matrix.arch}}-cmake mingw-w64-${{matrix.arch}}-gcc

    - uses: actions/checkout@v2
      
    - name: Install dependencies
      run: |
        wget https://www.libsdl.org/release/SDL2-devel-2.0.12-mingw.tar.gz
        tar xzf SDL2-devel-2.0.12-mingw.tar.gz && cd SDL2-2.0.12
        make install-package arch=${{matrix.arch}}-w64-mingw32 prefix=/usr && cd ..
        # SDL2_mixer
        wget https://www.libsdl.org/projects/SDL_mixer/release/SDL2_mixer-devel-2.0.4-mingw.tar.gz
        tar xzf SDL2_mixer-devel-2.0.4-mingw.tar.gz && cd SDL2_mixer-2.0.4
        make install-package arch=${{matrix.arch}}-w64-mingw32 prefix=/usr && cd ..
        # SDL2_image
        wget https://www.libsdl.org/projects/SDL_image/release/SDL2_image-devel-2.0.5-mingw.tar.gz
        tar xzf SDL2_image-devel-2.0.5-mingw.tar.gz && cd SDL2_image-2.0.5
        make install-package arch=${{matrix.arch}}-w64-mingw32 prefix=/usr && cd ..
        # SDL2_ttf
        wget https://www.libsdl.org/projects/SDL_ttf/release/SDL2_ttf-devel-2.0.15-mingw.tar.gz
        tar xzf SDL2_ttf-devel-2.0.15-mingw.tar.gz && cd SDL2_ttf-2.0.15
        make install-package arch=${{matrix.arch}}-w64-mingw32 prefix=/usr && cd ..
        # SDL2_net
        wget https://www.libsdl.org/projects/SDL_net/release/SDL2_net-devel-2.0.1-mingw.tar.gz
        tar xzf SDL2_net-devel-2.0.1-mingw.tar.gz && cd SDL2_net-2.0.1
        make install-package arch=${{matrix.arch}}-w64-mingw32 prefix=/usr && cd ..

    - name: Create Build Environment
      working-directory: ${{github.workspace}}
      # Some projects don't allow in-source building, so create a separate build directory
      # We'll use this as our working directory for all subsequent commands
      run: cmake -E make_directory build

    - name: Configure CMake
      # Use a bash shell so we can use the same syntax for environment variable
      # access regardless of the host operating system
      working-directory: ${{github.workspace}}
      # Note the current convention is to use the -S and -B options here to specify source 
      # and build directories, but this is only available with CMake 3.13 and higher.  
      # The CMake binaries on the Github Actions machines are (as of this writing) 3.12
      run: cd build && cmake .. -G"MSYS Makefiles" -DCMAKE_BUILD_TYPE=$BUILD_TYPE

    - name: Build
      working-directory: ${{github.workspace}}
      # Execute the build.  You can specify a specific target with "--target <NAME>"
      run: cd build && cmake --build . --config $BUILD_TYPE

    - name: Copy libraries
      working-directory: ${{github.workspace}}
      run: |
          cd build
          wget https://github.com/Rapiz1/DungeonRush/releases/download/v1.0-alpha/win-${{matrix.arch}}-lib.tar.gz
          tar xzf win-${{matrix.arch}}-lib.tar.gz
          mv win-${{matrix.arch}}-lib/* bin

    - uses: actions/upload-artifact@v2
      with:
        name: DungeonRush-${{runner.os}}-${{matrix.arch}}
        path: ${{github.workspace}}\build\bin
